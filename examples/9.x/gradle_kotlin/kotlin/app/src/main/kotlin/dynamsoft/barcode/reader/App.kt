/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dynamsoft.barcode.reader

import com.dynamsoft.dbr.*

import java.nio.file.*

class App {
    val greeting: String
        get() {
            return "Hello Dynamsoft Barcode Reader!"
        }
}

fun main(args: Array<String>) {
    println(App().greeting)
    println("Working Directory = " + System.getProperty("user.dir"))

    if (args.size == 0) {
        val newLine = System.getProperty("line.separator")
        val s = StringBuilder()
            .append("Usage:")
            .append(newLine)
            .append("    ./gradlew run --args=\"<image file> <license file>\"")
            .append(newLine)
            .toString()
        println(s)
        return
    }
    val file = args[0]
    var license = "DLS2eyJoYW5kc2hha2VDb2RlIjoiMjAwMDAxLTE2NDk4Mjk3OTI2MzUiLCJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSIsInNlc3Npb25QYXNzd29yZCI6IndTcGR6Vm05WDJrcEQ5YUoifQ=="
    if (args.size == 2) {
        license =
            String(Files.readAllBytes(Paths.get(args[1])))
    }

    // Set license
    val br = BarcodeReader(license)
    // Read barcode
    try {
        //Best coverage settings
        // br.initRuntimeSettingsWithString("{\"ImageParameter\":{\"Name\":\"BestCoverage\",\"DeblurLevel\":9,\"ExpectedBarcodesCount\":512,\"ScaleDownThreshold\":100000,\"LocalizationModes\":[{\"Mode\":\"LM_CONNECTED_BLOCKS\"},{\"Mode\":\"LM_SCAN_DIRECTLY\"},{\"Mode\":\"LM_STATISTICS\"},{\"Mode\":\"LM_LINES\"},{\"Mode\":\"LM_STATISTICS_MARKS\"}],\"GrayscaleTransformationModes\":[{\"Mode\":\"GTM_ORIGINAL\"},{\"Mode\":\"GTM_INVERTED\"}]}}", EnumConflictMode.CM_OVERWRITE);
        //Best speed settings
        //br.initRuntimeSettingsWithString("{\"ImageParameter\":{\"Name\":\"BestSpeed\",\"DeblurLevel\":3,\"ExpectedBarcodesCount\":512,\"LocalizationModes\":[{\"Mode\":\"LM_SCAN_DIRECTLY\"}],\"TextFilterModes\":[{\"MinImageDimension\":262144,\"Mode\":\"TFM_GENERAL_CONTOUR\"}]}}",EnumConflictMode.CM_OVERWRITE);
        //Balance settings
        br.initRuntimeSettingsWithString(
            "{\"ImageParameter\":{\"Name\":\"Balance\",\"DeblurLevel\":5,\"ExpectedBarcodesCount\":512,\"LocalizationModes\":[{\"Mode\":\"LM_CONNECTED_BLOCKS\"},{\"Mode\":\"LM_STATISTICS\"}]}}",
            EnumConflictMode.CM_OVERWRITE
        )
        val start = System.currentTimeMillis()
        val results: Array<TextResult> = br.decodeFile(file, "")
        val end = System.currentTimeMillis()
        if (results.size == 0) {
            println(
                String.format(
                    "No barcode found. Total time cost: %d ms.",
                    end - start
                )
            )
        } else {
            println(
                String.format(
                    "Total barcode(s) found: %d. Total time cost: %d ms.",
                    results.size,
                    end - start
                )
            )
            var index = 0
            for (result in results) {
                println(String.format("  Barcode %d:", index++))
                if (result.barcodeFormat != 0) {
                    System.out.println("    Type: " + result.barcodeFormatString)
                } else {
                    System.out.println("    Type: " + result.barcodeFormatString_2)
                }
                System.out.println("    Value: " + result.barcodeText)
                println(
                    java.lang.String.format(
                        "    Region points: {(%d,%d),(%d,%d),(%d,%d),(%d,%d)}",
                        result.localizationResult.resultPoints.get(0).x,
                        result.localizationResult.resultPoints.get(0).y,
                        result.localizationResult.resultPoints.get(1).x,
                        result.localizationResult.resultPoints.get(1).y,
                        result.localizationResult.resultPoints.get(2).x,
                        result.localizationResult.resultPoints.get(2).y,
                        result.localizationResult.resultPoints.get(3).x,
                        result.localizationResult.resultPoints.get(3).y
                    )
                )
            }
        }
    } catch (e: BarcodeReaderException) {
        e.printStackTrace()
    }
}

